// Code generated by protoc-gen-go.
// source: godrone.proto
// DO NOT EDIT!

/*
Package godrone is a generated protocol buffer package.

It is generated from these files:
	godrone.proto

It has these top-level messages:
	PutRequest
	PutResponse
	GetRequest
	GetResponse
*/
package godrone

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PutRequest struct {
	Keyspace string `protobuf:"bytes,1,opt,name=keyspace" json:"keyspace,omitempty"`
	Key      string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Value    string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (m *PutRequest) Reset()                    { *m = PutRequest{} }
func (m *PutRequest) String() string            { return proto.CompactTextString(m) }
func (*PutRequest) ProtoMessage()               {}
func (*PutRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PutResponse struct {
	Key     string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *PutResponse) Reset()                    { *m = PutResponse{} }
func (m *PutResponse) String() string            { return proto.CompactTextString(m) }
func (*PutResponse) ProtoMessage()               {}
func (*PutResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type GetRequest struct {
	Keyspace string `protobuf:"bytes,1,opt,name=keyspace" json:"keyspace,omitempty"`
	Key      string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type GetResponse struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (m *GetResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*PutRequest)(nil), "godrone.PutRequest")
	proto.RegisterType((*PutResponse)(nil), "godrone.PutResponse")
	proto.RegisterType((*GetRequest)(nil), "godrone.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "godrone.GetResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for CacheOps service

type CacheOpsClient interface {
	// Put one kv to cache
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
	// Get one kv from cache
	GetOne(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
}

type cacheOpsClient struct {
	cc *grpc.ClientConn
}

func NewCacheOpsClient(cc *grpc.ClientConn) CacheOpsClient {
	return &cacheOpsClient{cc}
}

func (c *cacheOpsClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := grpc.Invoke(ctx, "/godrone.CacheOps/Put", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheOpsClient) GetOne(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/godrone.CacheOps/GetOne", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CacheOps service

type CacheOpsServer interface {
	// Put one kv to cache
	Put(context.Context, *PutRequest) (*PutResponse, error)
	// Get one kv from cache
	GetOne(context.Context, *GetRequest) (*GetResponse, error)
}

func RegisterCacheOpsServer(s *grpc.Server, srv CacheOpsServer) {
	s.RegisterService(&_CacheOps_serviceDesc, srv)
}

func _CacheOps_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheOpsServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/godrone.CacheOps/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheOpsServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheOps_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheOpsServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/godrone.CacheOps/GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheOpsServer).GetOne(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CacheOps_serviceDesc = grpc.ServiceDesc{
	ServiceName: "godrone.CacheOps",
	HandlerType: (*CacheOpsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _CacheOps_Put_Handler,
		},
		{
			MethodName: "GetOne",
			Handler:    _CacheOps_GetOne_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("godrone.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 218 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0xcf, 0x4f, 0x29,
	0xca, 0xcf, 0x4b, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0x02, 0xb8,
	0xb8, 0x02, 0x4a, 0x4b, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0xa4, 0xb8, 0x38, 0xb2,
	0x53, 0x2b, 0x8b, 0x0b, 0x12, 0x93, 0x53, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xe0, 0x7c,
	0x21, 0x01, 0x2e, 0x66, 0x20, 0x5b, 0x82, 0x09, 0x2c, 0x0c, 0x62, 0x0a, 0x89, 0x70, 0xb1, 0x96,
	0x25, 0xe6, 0x94, 0xa6, 0x4a, 0x30, 0x83, 0xc5, 0x20, 0x1c, 0x25, 0x4b, 0x2e, 0x6e, 0xb0, 0x89,
	0xc5, 0x05, 0xf9, 0x79, 0xc5, 0x70, 0x6d, 0x8c, 0x08, 0x6d, 0x12, 0x5c, 0xec, 0xc5, 0xa5, 0xc9,
	0xc9, 0xa9, 0xc5, 0xc5, 0x60, 0xc3, 0x38, 0x82, 0x60, 0x5c, 0x25, 0x2b, 0x2e, 0x2e, 0xf7, 0x54,
	0xf2, 0x1c, 0xa3, 0x64, 0xca, 0xc5, 0x0d, 0xd6, 0x8b, 0xd3, 0x5a, 0xb8, 0x6b, 0x99, 0x90, 0x5c,
	0x6b, 0x54, 0xca, 0xc5, 0xe1, 0x9c, 0x98, 0x9c, 0x91, 0xea, 0x5f, 0x50, 0x2c, 0x64, 0xc4, 0xc5,
	0x0c, 0x74, 0xb9, 0x90, 0xb0, 0x1e, 0x2c, 0xac, 0x10, 0x21, 0x23, 0x25, 0x82, 0x2a, 0x08, 0xb1,
	0x45, 0x89, 0x41, 0xc8, 0x94, 0x8b, 0x0d, 0x68, 0xad, 0x7f, 0x5e, 0x2a, 0x92, 0x36, 0x84, 0x1f,
	0x90, 0xb4, 0x21, 0x39, 0x4e, 0x89, 0x21, 0x89, 0x0d, 0x1c, 0x0d, 0xc6, 0x80, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xbf, 0x6a, 0x75, 0x46, 0x97, 0x01, 0x00, 0x00,
}
